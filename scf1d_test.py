# -*- coding: utf-8 -*-
"""
Created on Mon Sep 15 21:08:34 2014

@author: Richard Sheridan

These tests were generated using the code as of 11/7/14.
No guarantee is made regarding absolute correctness, only that the results
haven't changed since that version.
"""

from __future__ import division, print_function
import numpy as np

from scf1d import (SCFprofile, SCFcache, SCFsolve, SCFeqns, SZdist,
                   calc_g_zs, NoConvergence)


def calc_g_zs_test():
    layers=10
    segments=20
    g_z = np.linspace(.9,1.1,layers)
    data=np.array((
       ( 0.90000000,  0.67833333,  0.53457407,  0.43538321,  0.36346252,
         0.30925318,  0.26714431,  0.23365571,  0.20652162,  0.18420452,
         0.16562391,  0.14999788,  0.13674637,  0.12542991,  0.11570948,
         0.10731936,  0.10004837,  0.0937266 ,  0.08821584,  0.08340252),
       ( 0.92222222,  0.85049383,  0.76425846,  0.68155058,  0.60783778,
         0.54394935,  0.4891275 ,  0.44218798,  0.40194363,  0.36734135,
         0.33749022,  0.31165092,  0.28921394,  0.26967689,  0.25262446,
         0.23771168,  0.22465053,  0.21319918,  0.20315348,  0.19434016),
       ( 0.94444444,  0.89197531,  0.84257659,  0.7930217 ,  0.74413393,
         0.69722471,  0.65323138,  0.61264733,  0.57563553,  0.54214957,
         0.5120236 ,  0.4850313 ,  0.46092225,  0.43944331,  0.42035059,
         0.4034157 ,  0.38842854,  0.37519809,  0.36355202,  0.3533357 ),
       ( 0.96666667,  0.93444444,  0.90345542,  0.87380169,  0.84505407,
         0.81709233,  0.79005942,  0.76420135,  0.73975859,  0.71691616,
         0.69579069,  0.67643584,  0.65885458,  0.64301244,  0.62884938,
         0.61628918,  0.6052467 ,  0.59563309,  0.58735937,  0.58033893),
       ( 0.98888889,  0.97790123,  0.96719845,  0.95693471,  0.94725739,
         0.93822305,  0.92984965,  0.92215235,  0.91515455,  0.90888661,
         0.90338093,  0.89866754,  0.89477117,  0.89170994,  0.88949506,
         0.88813126,  0.8876176 ,  0.88794842,  0.88911423,  0.89110265),
       ( 1.01111111,  1.02234568,  1.03387151,  1.04586384,  1.05850568,
         1.07179988,  1.08562363,  1.09981238,  1.11421611,  1.12872507,
         1.14327513,  1.1578427 ,  1.17243568,  1.18708411,  1.20183196,
         1.2167308 ,  1.23183506,  1.24719889,  1.26287398,  1.27890843),
       ( 1.03333333,  1.06777778,  1.10354047,  1.14085245,  1.17885107,
         1.21673962,  1.25401498,  1.29043   ,  1.32591   ,  1.36048312,
         1.39423345,  1.42727231,  1.45972146,  1.49170372,  1.52333786,
         1.55473604,  1.58600256,  1.6172335 ,  1.64851681,  1.67993261),
       ( 1.05555556,  1.11419753,  1.17627115,  1.23566805,  1.29102979,
         1.34261892,  1.39113583,  1.43729989,  1.48172328,  1.52489154,
         1.56717868,  1.60887008,  1.65018392,  1.69128862,  1.7323162 ,
         1.77337216,  1.81454277,  1.85590018,  1.8975062 ,  1.93941493),
       ( 1.07777778,  1.16160494,  1.21517227,  1.25496048,  1.28875838,
         1.32029364,  1.35135685,  1.38279751,  1.41500143,  1.44812428,
         1.48220808,  1.51724019,  1.55318343,  1.58999174,  1.62761807,
         1.66601842,  1.70515369,  1.74499047,  1.78550116,  1.82666377),
       ( 1.1       ,  1.00425926,  0.9494177 ,  0.91902123,  0.90402499,
         0.89922403,  0.90148479,  0.9088376 ,  0.91999378,  0.93407904,
         0.95048074,  0.96875736,  0.98858277,  1.00971099,  1.03195321,
         1.05516234,  1.07922242,  1.10404129,  1.1295452 ,  1.15567502)))

    # free chains
    c_i = np.zeros((1,segments))
    c_i[0,-1]= 1.0
    assert np.allclose(calc_g_zs(g_z,c_i,layers,segments), data, atol=1e-14)

    # uniform chains
    c_i = 1.0
    assert np.allclose(calc_g_zs(g_z,c_i,layers,segments), data, atol=1e-14)

    # end-tethered chains
    c_i = 0
    data = np.array((
       (  9.00000000e-01,   5.40000000e-01,   3.44750000e-01,
          2.32057407e-01,   1.63182762e-01,   1.18909613e-01,
          8.91942729e-02,   6.85112896e-02,   5.36702862e-02,
          4.27458873e-02,   3.45293323e-02,   2.82349142e-02,
          2.33361729e-02,   1.94708968e-02,   1.63840546e-02,
          1.38924051e-02,   1.18619166e-02,   1.01929871e-02,
          8.81054699e-03,   7.65729535e-03),
       (  0.00000000e+00,   1.38333333e-01,   1.68049383e-01,
          1.59655453e-01,   1.39999701e-01,   1.18990036e-01,
          9.99648391e-02,   8.37567498e-02,   7.02914374e-02,
          5.92119992e-02,   5.01154320e-02,   4.26348293e-02,
          3.64612874e-02,   3.13434433e-02,   2.70798154e-02,
          2.35098237e-02,   2.05055808e-02,   1.79650316e-02,
          1.58064477e-02,   1.39640932e-02),
       (  0.00000000e+00,   0.00000000e+00,   2.17746914e-02,
          4.01622085e-02,   5.09704753e-02,   5.55038957e-02,
          5.58698032e-02,   5.37794965e-02,   5.03986580e-02,
          4.64583240e-02,   4.23921664e-02,   3.84437829e-02,
          3.47398749e-02,   3.13372615e-02,   2.82521634e-02,
          2.54781029e-02,   2.29966886e-02,   2.07840162e-02,
          1.88143888e-02,   1.70624124e-02),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          3.50814472e-03,   8.73138241e-03,   1.39319543e-02,
          1.82139259e-02,   2.13049739e-02,   2.32609305e-02,
          2.42696439e-02,   2.45469939e-02,   2.42904207e-02,
          2.36629921e-02,   2.27918432e-02,   2.17724199e-02,
          2.06743749e-02,   1.95472967e-02,   1.84256090e-02,
          1.73324995e-02,   1.62829586e-02),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   5.78194222e-04,   1.82024107e-03,
          3.51226222e-03,   5.37879716e-03,   7.19678933e-03,
          8.82375170e-03,   1.01879864e-02,   1.12682785e-02,
          1.20747695e-02,   1.26345241e-02,   1.29818629e-02,
          1.31524460e-02,   1.31799736e-02,   1.30945794e-02,
          1.29222527e-02,   1.26848446e-02),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   9.74364337e-05,
          3.72423702e-04,   8.45750250e-04,   1.48928204e-03,
          2.25009829e-03,   3.07039056e-03,   3.89911195e-03,
          4.69684009e-03,   5.43641967e-03,   6.10148618e-03,
          6.68422006e-03,   7.18306621e-03,   7.60075285e-03,
          7.94271547e-03,   8.21591641e-03),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          1.67807191e-05,   7.56996886e-05,   1.98314090e-04,
          3.95755195e-04,   6.68038713e-04,   1.00663252e-03,
          1.39794287e-03,   1.82641850e-03,   2.27679495e-03,
          2.73546224e-03,   3.19113019e-03,   3.63500643e-03,
          4.06067510e-03,   4.46381663e-03),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   2.95216355e-06,   1.53949862e-05,
          4.58153916e-05,   1.02417597e-04,   1.91445606e-04,
          3.16399051e-04,   4.78006078e-04,   6.74663168e-04,
          9.03073979e-04,   1.15890201e-03,   1.43733487e-03,
          1.73351944e-03,   2.04286531e-03),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   5.30296046e-07,
          3.14642320e-06,   1.05080289e-05,   2.60638735e-05,
          5.35481090e-05,   9.64846722e-05,   1.57814991e-04,
          2.39684868e-04,   3.43375784e-04,   4.69343535e-04,
          6.17323631e-04,   7.86469082e-04),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          9.72209417e-08,   6.48139611e-07,   2.40177435e-06,
          6.53967800e-06,   1.46129172e-05,   2.84049958e-05,
          4.97630787e-05,   8.04351502e-05,   1.21938004e-04,
          1.75467518e-04,   2.41852179e-04)))
    assert np.allclose(calc_g_zs(g_z,c_i,layers,segments), data, atol=1e-14)


def SZdist_test():

    # uniform
    pdi=1
    nn=100
    data = np.array(((
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.)))
    assert np.allclose(SZdist(pdi,nn), data, atol=1e-14)

    # too narrow
    pdi=1.0000000001
    nn=100
    assert np.allclose(SZdist(pdi,nn), data, atol=1e-14)

    # broad
    pdi=2
    nn=30
    data = np.array(((
          3.22405367e-02,   3.11835662e-02,   3.01612473e-02,
          2.91724440e-02,   2.82160575e-02,   2.72910251e-02,
          2.63963189e-02,   2.55309446e-02,   2.46939407e-02,
          2.38843770e-02,   2.31013540e-02,   2.23440015e-02,
          2.16114780e-02,   2.09029695e-02,   2.02176887e-02,
          1.95548740e-02,   1.89137890e-02,   1.82937212e-02,
          1.76939817e-02,   1.71139040e-02,   1.65528435e-02,
          1.60101767e-02,   1.54853007e-02,   1.49776321e-02,
          1.44866070e-02,   1.40116795e-02,   1.35523220e-02,
          1.31080240e-02,   1.26782919e-02,   1.22626480e-02,
          1.18606306e-02,   1.14717929e-02,   1.10957028e-02,
          1.07319424e-02,   1.03801075e-02,   1.00398071e-02,
          9.71066304e-03,   9.39230964e-03,   9.08439310e-03,
          8.78657127e-03,   8.49851320e-03,   8.21989880e-03,
          7.95041846e-03,   7.68977274e-03,   7.43767200e-03,
          7.19383611e-03,   6.95799411e-03,   6.72988393e-03,
          6.50925209e-03,   6.29585343e-03,   6.08945080e-03,
          5.88981486e-03,   5.69672376e-03,   5.50996294e-03,
          5.32932487e-03,   5.15460882e-03,   4.98562064e-03,
          4.82217255e-03,   4.66408293e-03,   4.51117611e-03,
          4.36328216e-03,   4.22023676e-03,   4.08188094e-03,
          3.94806097e-03,   3.81862813e-03,   3.69343861e-03,
          3.57235329e-03,   3.45523762e-03,   3.34196146e-03,
          3.23239893e-03,   3.12642829e-03,   3.02393178e-03,
          2.92479550e-03,   2.82890930e-03,   2.73616662e-03,
          2.64646441e-03,   2.55970299e-03,   2.47578594e-03,
          2.39462002e-03,   2.31611504e-03,   2.24018376e-03,
          2.16674180e-03,   2.09570755e-03,   2.02700209e-03,
          1.96054905e-03,   1.89627461e-03,   1.83410734e-03,
          1.77397814e-03,   1.71582022e-03,   1.65956895e-03,
          1.60516180e-03,   1.55253834e-03,   1.50164008e-03,
          1.45241046e-03,   1.40479478e-03,   1.35874013e-03,
          1.31419533e-03,   1.27111088e-03,   1.22943891e-03,
          1.18913311e-03,   1.15014869e-03,   1.11244233e-03,
          1.07597213e-03,   1.04069757e-03,   1.00657945e-03,
          9.73579848e-04,   9.41662104e-04,   9.10790748e-04,
          8.80931476e-04,   8.52051107e-04,   8.24117549e-04,
          7.97099762e-04,   7.70967724e-04,   7.45692395e-04,
          7.21245691e-04,   6.97600444e-04,   6.74730382e-04,
          6.52610088e-04,   6.31214985e-04,   6.10521296e-04,
          5.90506027e-04,   5.71146937e-04,   5.52422513e-04,
          5.34311949e-04,   5.16795120e-04,   4.99852561e-04,
          4.83465445e-04,   4.67615562e-04,   4.52285300e-04,
          4.37457625e-04,   4.23116058e-04,   4.09244663e-04,
          3.95828028e-04,   3.82851241e-04,   3.70299885e-04,
          3.58160010e-04,   3.46418129e-04,   3.35061191e-04,
          3.24076579e-04,   3.13452085e-04,   3.03175903e-04,
          2.93236615e-04,   2.83623175e-04,   2.74324902e-04,
          2.65331462e-04,   2.56632862e-04,   2.48219436e-04,
          2.40081835e-04,   2.32211016e-04,   2.24598233e-04,
          2.17235027e-04,   2.10113216e-04,   2.03224886e-04,
          1.96562381e-04,   1.90118300e-04,   1.83885481e-04,
          1.77856998e-04,   1.72026152e-04,   1.66386464e-04,
          1.60931666e-04,   1.55655699e-04,   1.50552698e-04,
          1.45616994e-04,   1.40843101e-04,   1.36225715e-04,
          1.31759704e-04,   1.27440108e-04,   1.23262124e-04,
          1.19221111e-04,   1.15312578e-04,   1.11532182e-04,
          1.07875722e-04,   1.04339135e-04,   1.00918492e-04,
          9.76099898e-05,   9.44099537e-05,   9.13148273e-05,
          8.83211712e-05,   8.54256588e-05,   8.26250726e-05,
          7.99163005e-05,   7.72963325e-05,   7.47622573e-05,
          7.23112590e-05,   6.99406139e-05,   6.76476879e-05,
          6.54299329e-05,   6.32848845e-05,   6.12101592e-05,
          5.92034515e-05,   5.72625315e-05,   5.53852424e-05,
          5.35694982e-05,   5.18132812e-05,   5.01146398e-05,
          4.84716865e-05,   4.68825956e-05,   4.53456013e-05,
          4.38589956e-05,   4.24211267e-05,   4.10303968e-05,
          3.96852604e-05,   3.83842228e-05,   3.71258383e-05,
          3.59087085e-05,   3.47314810e-05,   3.35928476e-05,
          3.24915431e-05,   3.14263436e-05,   3.03960655e-05,
          2.93995640e-05,   2.84357316e-05,   2.75034974e-05,
          2.66018255e-05,   2.57297140e-05,   2.48861936e-05,
          2.40703271e-05,   2.32812080e-05,   2.25179592e-05,
          2.17797327e-05,   2.10657081e-05,   2.03750920e-05,
          1.97071171e-05,   1.90610409e-05,   1.84361457e-05,
          1.78317369e-05,   1.72471431e-05,   1.66817144e-05,
          1.61348228e-05,   1.56058604e-05,   1.50942394e-05,
          1.45993914e-05,   1.41207664e-05,   1.36578326e-05,
          1.32100756e-05,   1.27769978e-05,   1.23581180e-05,
          1.19529707e-05,   1.15611057e-05,   1.11820876e-05,
          1.08154952e-05,   1.04609211e-05,   1.01179713e-05,
          9.78626472e-06,   9.46543280e-06,   9.15511900e-06,
          8.85497850e-06,   8.56467777e-06,   8.28389424e-06,
          8.01231588e-06,   7.74964092e-06,   7.49557747e-06,
          7.24984321e-06,   7.01216508e-06,   6.78227897e-06,
          6.55992941e-06,   6.34486935e-06,   6.13685979e-06,
          5.93566959e-06,   5.74107520e-06,   5.55286037e-06,
          5.37081595e-06,   5.19473966e-06,   5.02443584e-06,
          4.85971524e-06,   4.70039482e-06,   4.54629755e-06,
          4.39725219e-06,   4.25309311e-06,   4.11366014e-06,
          3.97879832e-06,   3.84835779e-06,   3.72219362e-06,
          3.60016559e-06,   3.48213813e-06,   3.36798006e-06,
          3.25756454e-06,   3.15076887e-06,   3.04747438e-06,
          2.94756629e-06,   2.85093357e-06,   2.75746885e-06,
          2.66706827e-06,   2.57963137e-06,   2.49506100e-06,
          2.41326317e-06,   2.33414699e-06,   2.25762455e-06,
          2.18361081e-06,   2.11202354e-06,   2.04278317e-06,
          1.97581277e-06,   1.91103792e-06,   1.84838665e-06,
          1.78778933e-06,   1.72917862e-06,   1.67248940e-06,
          1.61765868e-06,   1.56462552e-06,   1.51333099e-06,
          1.46371810e-06,   1.41573171e-06,   1.36931851e-06,
          1.32442691e-06,   1.28100703e-06,   1.23901062e-06,
          1.19839102e-06,   1.15910309e-06,   1.12110317e-06,
          1.08434904e-06,   1.04879985e-06,   1.01441610e-06)))
    assert np.allclose(SZdist(pdi,nn), data, atol=1e-14)


easy_phi_z = np.array((
         3.65550149e-01,   3.97525443e-01,   3.95172152e-01,
         3.88749959e-01,   3.80779368e-01,   3.72122812e-01,
         3.63084907e-01,   3.53792041e-01,   3.44308173e-01,
         3.34672971e-01,   3.24914953e-01,   3.15056584e-01,
         3.05116691e-01,   2.95111868e-01,   2.85057374e-01,
         2.74967708e-01,   2.64856970e-01,   2.54739075e-01,
         2.44627864e-01,   2.34537166e-01,   2.24480823e-01,
         2.14472701e-01,   2.04526687e-01,   1.94656691e-01,
         1.84876648e-01,   1.75200542e-01,   1.65642408e-01,
         1.56216230e-01,   1.46935815e-01,   1.37814718e-01,
         1.28867719e-01,   1.20111261e-01,   1.11557172e-01,
         1.03218992e-01,   9.51116547e-02,   8.72496343e-02,
         7.96473020e-02,   7.23191514e-02,   6.52798584e-02,
         5.85443198e-02,   5.21277480e-02,   4.60458038e-02,
         4.03146785e-02,   3.49511036e-02,   2.99721111e-02,
         2.53944258e-02,   2.12333599e-02,   1.75011292e-02,
         1.42046841e-02,   1.13433823e-02,   8.90703375e-03,
         6.87490760e-03,   5.21614179e-03,   3.89157273e-03,
         2.85666431e-03,   2.06494636e-03,   1.47126197e-03,
         1.03429489e-03,   7.18138304e-04,   4.92931865e-04,
         3.34762317e-04,   2.25084794e-04,   1.49905568e-04,
         9.89146455e-05,   6.46641149e-05,   4.18644798e-05,
         2.68144592e-05,   1.69574361e-05))


def SCFeqns_test():

    # away from solution
    phi_z = np.linspace(.5,0,50)
    chi = 0.1
    chi_s = 0.05
    sigma = .1
    navgsegments = 95.5
    pdi = 1.2
    p_i = SZdist(pdi,navgsegments)
    data = np.array((
        0.24810378,  0.19945097,  0.16973725,  0.14729956,  0.13006686,
        0.11658225,  0.10586535,  0.0972781 ,  0.09039446,  0.08491051,
        0.08059274,  0.07725048,  0.07472126,  0.07286278,  0.07154816,
        0.0706631 ,  0.07010401,  0.06977679,  0.06959604,  0.06948434,
        0.06937178,  0.0691954 ,  0.06889878,  0.06843147,  0.06774859,
        0.06681028,  0.06558131,  0.06403057,  0.06213075,  0.05985788,
        0.05719101,  0.05411175,  0.05060381,  0.04665231,  0.04224292,
        0.03736045,  0.03198701,  0.02609946,  0.01966667,  0.01264807,
        0.00499856, -0.00330835, -0.01221432, -0.02142874, -0.03017032,
       -0.036859  , -0.03906598, -0.03438694, -0.02291   , -0.01063772))
    result = SCFeqns(phi_z,chi,chi_s,sigma,navgsegments,p_i)
    assert np.allclose(result, data, atol=1e-14)

    # at solution
    phi_z = easy_phi_z.copy()
    data = np.array((
         -8.94301463e-08,  -8.54926846e-08,  -8.48261388e-08,
        -8.63975905e-08,  -8.69395192e-08,  -8.93377617e-08,
        -9.09841657e-08,  -9.27694738e-08,  -9.40202529e-08,
        -9.15368746e-08,  -9.14763008e-08,  -9.09397544e-08,
        -8.86826744e-08,  -8.53626849e-08,  -8.09892757e-08,
        -7.78940357e-08,  -7.61289833e-08,  -7.04561874e-08,
        -6.17791860e-08,  -5.30517064e-08,  -5.05450191e-08,
        -6.12440418e-08,  -9.95948151e-08,  -1.80944723e-07,
        -3.13346818e-07,  -4.69662996e-07,  -6.22535829e-07,
        -9.26554049e-07,  -1.82794947e-06,  -3.85118182e-06,
        -5.49741579e-06,  -3.57205254e-06,  -1.60524494e-06,
        -9.99775760e-07,  -9.79287226e-07,  -1.22893515e-06,
        -1.68575805e-06,  -2.29902384e-06,  -3.00785458e-06,
        -3.78510399e-06,  -4.63784940e-06,  -5.56981451e-06,
        -6.57126744e-06,  -7.58582431e-06,  -8.52386576e-06,
        -9.28524056e-06,  -9.77055209e-06,  -9.89221388e-06,
        -9.58838679e-06,  -8.83634616e-06,  -7.66057845e-06,
        -6.13119467e-06,  -4.33559537e-06,  -2.37547500e-06,
        -3.70371253e-07,   1.56485541e-06,   3.34331420e-06,
         4.91516031e-06,   6.26511768e-06,   7.40554630e-06,
         8.36923052e-06,   9.20310167e-06,   9.96358757e-06,
         1.07179875e-05,   1.15255367e-05,   1.23926773e-05,
         1.31522431e-05,   1.31565523e-05))
    result = SCFeqns(phi_z,chi,chi_s,sigma,navgsegments,p_i)
    assert np.allclose(result, data, atol=1e-14)

    # check that penalty penalizes
    phi_z[0]=.999
    result = SCFeqns(phi_z,chi,chi_s,sigma,navgsegments,p_i)
    below = np.linalg.norm(result,np.inf)
    phi_z[0] = 1.0
    result = SCFeqns(phi_z,chi,chi_s,sigma,navgsegments,p_i)
    above = np.linalg.norm(result,np.inf)
    assert above > (below + 1e5*(phi_z[0]-.99999))

    #TODO: check float overflow handling


def SCFsolve_test():

    #find the solution used in the previous test without an initial guess
    chi = 0.1
    chi_s = 0.05
    sigma = .1
    navgsegments = 95.5
    pdi = 1.2
    data = easy_phi_z.copy()
    result = SCFsolve(chi,chi_s,pdi,sigma,navgsegments)
    assert np.allclose(result, data, atol=1e-14)

    # try a very hard one using the answer as an initial guess
    chi = 1
    chi_s = .5
    try:
        SCFsolve(chi,chi_s,pdi,sigma,navgsegments)
    except NoConvergence:
        pass
    else: # Belongs to try, executes if no exception is raised
        assert False, 'should not arrive here'

    phi0 = np.array((
         7.68622748e-01,   7.38403430e-01,   7.24406743e-01,
         7.18854113e-01,   7.13805025e-01,   7.08721605e-01,
         7.03592422e-01,   6.98483104e-01,   6.93373096e-01,
         6.87807938e-01,   6.79307808e-01,   6.56674507e-01,
         5.77590583e-01,   3.58036148e-01,   1.00802863e-01,
         1.68381666e-02,   2.86654637e-03,   6.37708606e-04,
         1.74095080e-04,   5.19490850e-05,   1.59662700e-05,
         4.94738039e-06,   1.53508370e-06,   4.75950448e-07,
         1.47353950e-07))
    data = np.array((
         7.68622759e-01,   7.38403445e-01,   7.24406760e-01,
         7.18854131e-01,   7.13805044e-01,   7.08721625e-01,
         7.03592442e-01,   6.98483125e-01,   6.93373119e-01,
         6.87807963e-01,   6.79307838e-01,   6.56674555e-01,
         5.77590679e-01,   3.58036287e-01,   1.00802888e-01,
         1.68381304e-02,   2.86650182e-03,   6.37663255e-04,
         1.74049587e-04,   5.19035276e-05,   1.59206139e-05,
         4.90143989e-06,   1.48825262e-06,   4.26488751e-07,
         9.20866301e-08))
    result = SCFsolve(chi,chi_s,pdi,sigma,navgsegments,False,phi0)
    assert np.allclose(result, data, atol=1e-14)


def SCFcache_test():

    # check that the hard solution can be found by walking
    chi = 1
    chi_s = 0.5
    sigma = .1
    navgsegments = 95.5
    pdi = 1.2
    from collections import OrderedDict
    cache = OrderedDict()
    data = np.array((
         7.68622748e-01,   7.38403430e-01,   7.24406743e-01,
         7.18854113e-01,   7.13805025e-01,   7.08721605e-01,
         7.03592422e-01,   6.98483104e-01,   6.93373096e-01,
         6.87807938e-01,   6.79307808e-01,   6.56674507e-01,
         5.77590583e-01,   3.58036148e-01,   1.00802863e-01,
         1.68381666e-02,   2.86654637e-03,   6.37708606e-04,
         1.74095080e-04,   5.19490850e-05,   1.59662700e-05,
         4.94738039e-06,   1.53508370e-06,   4.75950448e-07,
         1.47353950e-07))
    result = SCFcache(chi,chi_s,pdi,sigma,navgsegments,False,cache)
    assert np.allclose(result, data, atol=1e-14)

    # check that the cache is holding items
    assert cache

    # check that cache is reordered on hits and misses
    cache_keys = list(cache)
    oldest_key = cache_keys[0]
    newest_key = cache_keys[-1]
    SCFcache(0,0,1,.1,100,False,cache)
    assert oldest_key == list(cache)[-1]
    SCFcache(chi,chi_s,pdi+.1,sigma,navgsegments,False,cache)
    assert newest_key == list(cache)[-2]


long_profile = np.array((
         4.99184756e-01,   4.87940275e-01,   4.76695793e-01,
         4.65451312e-01,   4.56517574e-01,   4.50163833e-01,
         4.43810092e-01,   4.37456351e-01,   4.34543888e-01,
         4.31831919e-01,   4.29119949e-01,   4.26632840e-01,
         4.24459561e-01,   4.22286283e-01,   4.20113004e-01,
         4.18039930e-01,   4.15979254e-01,   4.13918578e-01,
         4.11869564e-01,   4.09841071e-01,   4.07812577e-01,
         4.05784084e-01,   4.03771884e-01,   4.01762907e-01,
         3.99753930e-01,   3.97750220e-01,   3.95758381e-01,
         3.93766543e-01,   3.91774704e-01,   3.89794971e-01,
         3.87818658e-01,   3.85842344e-01,   3.83869457e-01,
         3.81906728e-01,   3.79943998e-01,   3.77981269e-01,
         3.76026878e-01,   3.74075655e-01,   3.72124431e-01,
         3.70175084e-01,   3.68233377e-01,   3.66291669e-01,
         3.64349961e-01,   3.62413429e-01,   3.60479448e-01,
         3.58545468e-01,   3.56612366e-01,   3.54684561e-01,
         3.52756756e-01,   3.50828951e-01,   3.48904129e-01,
         3.46981177e-01,   3.45058225e-01,   3.43135598e-01,
         3.41216381e-01,   3.39297164e-01,   3.37377946e-01,
         3.35460292e-01,   3.33543866e-01,   3.31627441e-01,
         3.29711080e-01,   3.27796649e-01,   3.25882218e-01,
         3.23967787e-01,   3.22054019e-01,   3.20140903e-01,
         3.18227787e-01,   3.16314671e-01,   3.14402270e-01,
         3.12489887e-01,   3.10577503e-01,   3.08665221e-01,
         3.06753065e-01,   3.04840908e-01,   3.02928752e-01,
         3.01016395e-01,   2.99104023e-01,   2.97191650e-01,
         2.95279036e-01,   2.93366053e-01,   2.91453070e-01,
         2.89540087e-01,   2.87626269e-01,   2.85712322e-01,
         2.83798375e-01,   2.81883991e-01,   2.79968758e-01,
         2.78053524e-01,   2.76138291e-01,   2.74221772e-01,
         2.72304955e-01,   2.70388137e-01,   2.68470791e-01,
         2.66552113e-01,   2.64633434e-01,   2.62714756e-01,
         2.60794471e-01,   2.58873670e-01,   2.56952869e-01,
         2.55031524e-01,   2.53108350e-01,   2.51185176e-01,
         2.49262002e-01,   2.47336996e-01,   2.45411210e-01,
         2.43485424e-01,   2.41559143e-01,   2.39630515e-01,
         2.37701886e-01,   2.35773257e-01,   2.33842643e-01,
         2.31910944e-01,   2.29979245e-01,   2.28047153e-01,
         2.26112151e-01,   2.24177150e-01,   2.22242149e-01,
         2.20305052e-01,   2.18366509e-01,   2.16427966e-01,
         2.14489180e-01,   2.12546850e-01,   2.10604520e-01,
         2.08662190e-01,   2.06717692e-01,   2.04771321e-01,
         2.02824950e-01,   2.00878540e-01,   1.98927856e-01,
         1.96977172e-01,   1.95026488e-01,   1.93073585e-01,
         1.91118293e-01,   1.89163000e-01,   1.87207707e-01,
         1.85247705e-01,   1.83287477e-01,   1.81327248e-01,
         1.79364762e-01,   1.77399241e-01,   1.75433720e-01,
         1.73468198e-01,   1.71497575e-01,   1.69526377e-01,
         1.67555180e-01,   1.65581724e-01,   1.63604444e-01,
         1.61627165e-01,   1.59649885e-01,   1.57667119e-01,
         1.55683338e-01,   1.53699557e-01,   1.51713600e-01,
         1.49722938e-01,   1.47732276e-01,   1.45741614e-01,
         1.43745321e-01,   1.41747520e-01,   1.39749720e-01,
         1.37750042e-01,   1.35745060e-01,   1.33740077e-01,
         1.31735094e-01,   1.29725079e-01,   1.27713238e-01,
         1.25701396e-01,   1.23688329e-01,   1.21670544e-01,
         1.19652760e-01,   1.17634975e-01,   1.15614371e-01,
         1.13592433e-01,   1.11570495e-01,   1.09548381e-01,
         1.07525277e-01,   1.05502173e-01,   1.03479069e-01,
         1.01458061e-01,   9.94383177e-02,   9.74185745e-02,
         9.53997672e-02,   9.33897602e-02,   9.13797532e-02,
         8.93697462e-02,   8.73700753e-02,   8.53782464e-02,
         8.33864175e-02,   8.13957691e-02,   7.94326796e-02,
         7.74695900e-02,   7.55065005e-02,   7.35645909e-02,
         7.16427438e-02,   6.97208967e-02,   6.77990496e-02,
         6.59316684e-02,   6.40650594e-02,   6.21984504e-02,
         6.03639418e-02,   5.85673453e-02,   5.67707489e-02,
         5.49741525e-02,   5.32563632e-02,   5.15444176e-02,
         4.98324719e-02,   4.81601239e-02,   4.65463281e-02,
         4.49325323e-02,   4.33187365e-02,   4.18009057e-02,
         4.02966696e-02,   3.87924336e-02,   3.73293487e-02,
         3.59432316e-02,   3.45571145e-02,   3.31709973e-02,
         3.18861365e-02,   3.06233733e-02,   2.93606100e-02,
         2.81345495e-02,   2.69969092e-02,   2.58592690e-02,
         2.47216287e-02,   2.36786414e-02,   2.26646003e-02,
         2.16505592e-02,   2.06649224e-02,   1.97700872e-02,
         1.88752520e-02,   1.79804168e-02,   1.71655598e-02,
         1.63832506e-02,   1.56009415e-02,   1.48377259e-02,
         1.41596245e-02,   1.34815232e-02,   1.28034218e-02,
         1.21875363e-02,   1.16043197e-02,   1.10211031e-02,
         1.04487964e-02,   9.95069867e-03,   9.45260099e-03,
         8.95450331e-03,   8.50167600e-03,   8.07894790e-03,
         7.65621979e-03,   7.23831624e-03,   6.88157093e-03,
         6.52482563e-03,   6.16808032e-03,   5.84254116e-03,
         5.54299278e-03,   5.24344439e-03,   4.94478399e-03,
         4.69439256e-03,   4.44400113e-03,   4.19360970e-03,
         3.96378800e-03,   3.75532961e-03,   3.54687122e-03,
         3.33841282e-03,   3.16417895e-03,   2.99125964e-03,
         2.81834033e-03,   2.65846361e-03,   2.51549395e-03,
         2.37252429e-03,   2.22955463e-03,   2.10938731e-03,
         1.99153155e-03,   1.87367580e-03,   1.76379632e-03,
         1.66690704e-03,   1.57001776e-03,   1.47312848e-03,
         1.39110998e-03,   1.31165618e-03,   1.23220238e-03,
         1.15744962e-03,   1.09244385e-03,   1.02743807e-03,
         9.62432298e-04,   9.06948025e-04,   8.53876207e-04,
         8.00804389e-04,   7.50389298e-04,   7.07145465e-04,
         6.63901633e-04,   6.20657801e-04,   5.83409002e-04,
         5.48236076e-04,   5.13063149e-04,   4.79313159e-04,
         4.50750275e-04,   4.22187392e-04,   3.93624509e-04,
         3.68774924e-04,   3.45611302e-04,   3.22447679e-04,
         2.99988796e-04,   2.81223878e-04,   2.62458960e-04,
         2.43694042e-04,   2.27190617e-04,   2.12000118e-04,
         1.96809619e-04,   1.81923875e-04,   1.69631348e-04,
         1.57338821e-04,   1.45046294e-04,   1.34108984e-04,
         1.24162607e-04,   1.14216230e-04,   1.04365100e-04,
         9.63195786e-05,   8.82740572e-05,   8.02285357e-05,
         7.29926432e-05,   6.64964117e-05,   6.00001802e-05,
         5.35039487e-05,   4.82859385e-05,   4.30742822e-05,
         3.78626259e-05,   3.31685280e-05,   2.90638848e-05,
         2.49592417e-05,   2.08545985e-05,   0.00000000e+00,
         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
         0.00000000e+00,   0.00000000e+00))


def SCFprofile_test():

    # basically checking that numpy interp hasn't changed
    data = long_profile.copy()
    result = SCFprofile(np.linspace(0,100,350), chi=.5, chi_s=.3, h_dry=15,
                        l_lat=1, mn=200, m_lat=1, pdi=1.5, disp=False)
    assert np.allclose(result, data, atol=1e-14)


def main():
    from time import time
    start=time()
    calc_g_zs_test()
    SZdist_test()
    SCFeqns_test()
    SCFsolve_test()
    SCFcache_test()
    SCFprofile_test()
    stop=time()
    print('All tests passed in {:.3g} seconds!'.format(stop-start))


if __name__ == '__main__':
    main()
