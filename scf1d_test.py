# -*- coding: utf-8 -*-
"""
Created on Mon Sep 15 21:08:34 2014

@author: Richard Sheridan

These tests were generated using the code as of 4/24/14.
No guarantee is made regarding absolute correctness, only that the results
haven't changed since that version.
"""

from __future__ import division, print_function
import numpy as np

from scf1d import (SCFprofile, SCFsqueeze, SCFcache, SCFsolve, SCFeqns, SZdist,
                   SCFeqns_multi, Propagator, NoConvergence, _SCFcache_dict)

g_zs_data=np.array((
   ( 0.90000000,  0.67833333,  0.53457407,  0.43538321,  0.36346252,
     0.30925318,  0.26714431,  0.23365571,  0.20652162,  0.18420452,
     0.16562391,  0.14999788,  0.13674637,  0.12542991,  0.11570948,
     0.10731936,  0.10004837,  0.0937266 ,  0.08821584,  0.08340252),
   ( 0.92222222,  0.85049383,  0.76425846,  0.68155058,  0.60783778,
     0.54394935,  0.4891275 ,  0.44218798,  0.40194363,  0.36734135,
     0.33749022,  0.31165092,  0.28921394,  0.26967689,  0.25262446,
     0.23771168,  0.22465053,  0.21319918,  0.20315348,  0.19434016),
   ( 0.94444444,  0.89197531,  0.84257659,  0.7930217 ,  0.74413393,
     0.69722471,  0.65323138,  0.61264733,  0.57563553,  0.54214957,
     0.5120236 ,  0.4850313 ,  0.46092225,  0.43944331,  0.42035059,
     0.4034157 ,  0.38842854,  0.37519809,  0.36355202,  0.3533357 ),
   ( 0.96666667,  0.93444444,  0.90345542,  0.87380169,  0.84505407,
     0.81709233,  0.79005942,  0.76420135,  0.73975859,  0.71691616,
     0.69579069,  0.67643584,  0.65885458,  0.64301244,  0.62884938,
     0.61628918,  0.6052467 ,  0.59563309,  0.58735937,  0.58033893),
   ( 0.98888889,  0.97790123,  0.96719845,  0.95693471,  0.94725739,
     0.93822305,  0.92984965,  0.92215235,  0.91515455,  0.90888661,
     0.90338093,  0.89866754,  0.89477117,  0.89170994,  0.88949506,
     0.88813126,  0.8876176 ,  0.88794842,  0.88911423,  0.89110265),
   ( 1.01111111,  1.02234568,  1.03387151,  1.04586384,  1.05850568,
     1.07179988,  1.08562363,  1.09981238,  1.11421611,  1.12872507,
     1.14327513,  1.1578427 ,  1.17243568,  1.18708411,  1.20183196,
     1.2167308 ,  1.23183506,  1.24719889,  1.26287398,  1.27890843),
   ( 1.03333333,  1.06777778,  1.10354047,  1.14085245,  1.17885107,
     1.21673962,  1.25401498,  1.29043   ,  1.32591   ,  1.36048312,
     1.39423345,  1.42727231,  1.45972146,  1.49170372,  1.52333786,
     1.55473604,  1.58600256,  1.6172335 ,  1.64851681,  1.67993261),
   ( 1.05555556,  1.11419753,  1.17627115,  1.23566805,  1.29102979,
     1.34261892,  1.39113583,  1.43729989,  1.48172328,  1.52489154,
     1.56717868,  1.60887008,  1.65018392,  1.69128862,  1.7323162 ,
     1.77337216,  1.81454277,  1.85590018,  1.8975062 ,  1.93941493),
   ( 1.07777778,  1.16160494,  1.21517227,  1.25496048,  1.28875838,
     1.32029364,  1.35135685,  1.38279751,  1.41500143,  1.44812428,
     1.48220808,  1.51724019,  1.55318343,  1.58999174,  1.62761807,
     1.66601842,  1.70515369,  1.74499047,  1.78550116,  1.82666377),
   ( 1.1       ,  1.00425926,  0.9494177 ,  0.91902123,  0.90402499,
     0.89922403,  0.90148479,  0.9088376 ,  0.91999378,  0.93407904,
     0.95048074,  0.96875736,  0.98858277,  1.00971099,  1.03195321,
     1.05516234,  1.07922242,  1.10404129,  1.1295452 ,  1.15567502)))

g_zs_ta_data = np.array((
       (  9.00000000e-01,   5.40000000e-01,   3.44750000e-01,
          2.32057407e-01,   1.63182762e-01,   1.18909613e-01,
          8.91942729e-02,   6.85112896e-02,   5.36702862e-02,
          4.27458873e-02,   3.45293323e-02,   2.82349142e-02,
          2.33361729e-02,   1.94708968e-02,   1.63840546e-02,
          1.38924051e-02,   1.18619166e-02,   1.01929871e-02,
          8.81054699e-03,   7.65729535e-03),
       (  0.00000000e+00,   1.38333333e-01,   1.68049383e-01,
          1.59655453e-01,   1.39999701e-01,   1.18990036e-01,
          9.99648391e-02,   8.37567498e-02,   7.02914374e-02,
          5.92119992e-02,   5.01154320e-02,   4.26348293e-02,
          3.64612874e-02,   3.13434433e-02,   2.70798154e-02,
          2.35098237e-02,   2.05055808e-02,   1.79650316e-02,
          1.58064477e-02,   1.39640932e-02),
       (  0.00000000e+00,   0.00000000e+00,   2.17746914e-02,
          4.01622085e-02,   5.09704753e-02,   5.55038957e-02,
          5.58698032e-02,   5.37794965e-02,   5.03986580e-02,
          4.64583240e-02,   4.23921664e-02,   3.84437829e-02,
          3.47398749e-02,   3.13372615e-02,   2.82521634e-02,
          2.54781029e-02,   2.29966886e-02,   2.07840162e-02,
          1.88143888e-02,   1.70624124e-02),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          3.50814472e-03,   8.73138241e-03,   1.39319543e-02,
          1.82139259e-02,   2.13049739e-02,   2.32609305e-02,
          2.42696439e-02,   2.45469939e-02,   2.42904207e-02,
          2.36629921e-02,   2.27918432e-02,   2.17724199e-02,
          2.06743749e-02,   1.95472967e-02,   1.84256090e-02,
          1.73324995e-02,   1.62829586e-02),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   5.78194222e-04,   1.82024107e-03,
          3.51226222e-03,   5.37879716e-03,   7.19678933e-03,
          8.82375170e-03,   1.01879864e-02,   1.12682785e-02,
          1.20747695e-02,   1.26345241e-02,   1.29818629e-02,
          1.31524460e-02,   1.31799736e-02,   1.30945794e-02,
          1.29222527e-02,   1.26848446e-02),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   9.74364337e-05,
          3.72423702e-04,   8.45750250e-04,   1.48928204e-03,
          2.25009829e-03,   3.07039056e-03,   3.89911195e-03,
          4.69684009e-03,   5.43641967e-03,   6.10148618e-03,
          6.68422006e-03,   7.18306621e-03,   7.60075285e-03,
          7.94271547e-03,   8.21591641e-03),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          1.67807191e-05,   7.56996886e-05,   1.98314090e-04,
          3.95755195e-04,   6.68038713e-04,   1.00663252e-03,
          1.39794287e-03,   1.82641850e-03,   2.27679495e-03,
          2.73546224e-03,   3.19113019e-03,   3.63500643e-03,
          4.06067510e-03,   4.46381663e-03),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   2.95216355e-06,   1.53949862e-05,
          4.58153916e-05,   1.02417597e-04,   1.91445606e-04,
          3.16399051e-04,   4.78006078e-04,   6.74663168e-04,
          9.03073979e-04,   1.15890201e-03,   1.43733487e-03,
          1.73351944e-03,   2.04286531e-03),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   5.30296046e-07,
          3.14642320e-06,   1.05080289e-05,   2.60638735e-05,
          5.35481090e-05,   9.64846722e-05,   1.57814991e-04,
          2.39684868e-04,   3.43375784e-04,   4.69343535e-04,
          6.17323631e-04,   7.86469082e-04),
       (  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
          9.72209417e-08,   6.48139611e-07,   2.40177435e-06,
          6.53967800e-06,   1.46129172e-05,   2.84049958e-05,
          4.97630787e-05,   8.04351502e-05,   1.21938004e-04,
          1.75467518e-04,   2.41852179e-04)))

def calc_g_zs_ta_test():
    layers=10
    segments=20
    g_z = np.linspace(.9,1.1,layers)
    g_zs = Propagator(g_z,segments)
    assert np.allclose(g_zs.ta(), g_zs_ta_data, atol=1e-14)


def calc_g_zs_ngts_u_test():
    layers=10
    segments=20
    g_z = np.linspace(.9,1.1,layers)
    c = 1.0
    g_zs = Propagator(g_z,segments)
    assert np.allclose(g_zs.ngts_u(c), g_zs_data, atol=1e-14)

def calc_g_zs_ngts_test():
    layers=10
    segments=20
    g_z = np.linspace(.9,1.1,layers)
    c_i = np.zeros(segments)
    c_i[-1]= 1.0
    g_zs = Propagator(g_z,segments)
    assert np.allclose(g_zs.ngts(c_i), g_zs_data, atol=1e-14)

def calc_g_zs_free_test():
    layers=10
    segments=20
    g_z = np.linspace(.9,1.1,layers)
    g_zs = Propagator(g_z,segments)
    assert np.allclose(g_zs.free(), g_zs_data, atol=1e-14)


def SZdist_test():

    # uniform
    pdi=1
    nn=100
    data = np.array(((
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.)))
    assert np.allclose(SZdist(pdi,nn), data, atol=1e-14)

    # too narrow
    pdi=1.0000000001
    nn=100
    assert np.allclose(SZdist(pdi,nn), data, atol=1e-14)

    # broad
    pdi=2
    nn=30
    data = np.array([  3.27848972e-02,   3.17100805e-02,   3.06705004e-02,
         2.96650018e-02,   2.86924673e-02,   2.77518164e-02,
         2.68420036e-02,   2.59620181e-02,   2.51108819e-02,
         2.42876492e-02,   2.34914054e-02,   2.27212655e-02,
         2.19763738e-02,   2.12559026e-02,   2.05590512e-02,
         1.98850454e-02,   1.92331360e-02,   1.86025988e-02,
         1.79927331e-02,   1.74028611e-02,   1.68323275e-02,
         1.62804982e-02,   1.57467599e-02,   1.52305197e-02,
         1.47312039e-02,   1.42482576e-02,   1.37811442e-02,
         1.33293445e-02,   1.28923566e-02,   1.24696949e-02,
         1.20608897e-02,   1.16654867e-02,   1.12830465e-02,
         1.09131443e-02,   1.05553688e-02,   1.02093227e-02,
         9.87462129e-03,   9.55089270e-03,   9.23777719e-03,
         8.93492683e-03,   8.64200509e-03,   8.35868646e-03,
         8.08465612e-03,   7.81960957e-03,   7.56325228e-03,
         7.31529937e-03,   7.07547533e-03,   6.84351366e-03,
         6.61915660e-03,   6.40215483e-03,   6.19226723e-03,
         5.98926056e-03,   5.79290925e-03,   5.60299509e-03,
         5.41930706e-03,   5.24164105e-03,   5.06979961e-03,
         4.90359181e-03,   4.74283295e-03,   4.58734439e-03,
         4.43695335e-03,   4.29149272e-03,   4.15080086e-03,
         4.01472142e-03,   3.88310319e-03,   3.75579993e-03,
         3.63267016e-03,   3.51357707e-03,   3.39838831e-03,
         3.28697589e-03,   3.17921600e-03,   3.07498890e-03,
         2.97417878e-03,   2.87667360e-03,   2.78236502e-03,
         2.69114825e-03,   2.60292191e-03,   2.51758798e-03,
         2.43505163e-03,   2.35522114e-03,   2.27800781e-03,
         2.20332583e-03,   2.13109222e-03,   2.06122670e-03,
         1.99365165e-03,   1.92829198e-03,   1.86507505e-03,
         1.80393062e-03,   1.74479074e-03,   1.68758969e-03,
         1.63226392e-03,   1.57875194e-03,   1.52699430e-03,
         1.47693347e-03,   1.42851383e-03,   1.38168158e-03,
         1.33638467e-03,   1.29257277e-03,   1.25019719e-03,
         1.20921085e-03,   1.16956821e-03,   1.13122520e-03,
         1.09413923e-03,   1.05826908e-03,   1.02357489e-03,
         9.90018113e-04,   9.57561458e-04,   9.26168860e-04,
         8.95805433e-04,   8.66437437e-04,   8.38032240e-04,
         8.10558275e-04,   7.83985014e-04,   7.58282928e-04,
         7.33423457e-04,   7.09378976e-04,   6.86122767e-04,
         6.63628987e-04,   6.41872641e-04,   6.20829553e-04,
         6.00476339e-04,   5.80790383e-04,   5.61749809e-04,
         5.43333460e-04,   5.25520871e-04,   5.08292247e-04,
         4.91628445e-04,   4.75510948e-04,   4.59921844e-04,
         4.44843813e-04,   4.30260098e-04,   4.16154494e-04,
         4.02511327e-04,   3.89315436e-04,   3.76552158e-04,
         3.64207310e-04,   3.52267174e-04,   3.40718482e-04,
         3.29548402e-04,   3.18744520e-04,   3.08294832e-04,
         2.98187725e-04,   2.88411969e-04,   2.78956700e-04,
         2.69811411e-04,   2.60965941e-04,   2.52410460e-04,
         2.44135461e-04,   2.36131748e-04,   2.28390429e-04,
         2.20902900e-04,   2.13660842e-04,   2.06656206e-04,
         1.99881210e-04,   1.93328324e-04,   1.86990268e-04,
         1.80859998e-04,   1.74930702e-04,   1.69195791e-04,
         1.63648893e-04,   1.58283844e-04,   1.53094683e-04,
         1.48075642e-04,   1.43221145e-04,   1.38525797e-04,
         1.33984382e-04,   1.29591851e-04,   1.25343325e-04,
         1.21234082e-04,   1.17259556e-04,   1.13415331e-04,
         1.09697134e-04,   1.06100834e-04,   1.02622435e-04,
         9.92580712e-05,   9.60040046e-05,   9.28566190e-05,
         8.98124169e-05,   8.68680156e-05,   8.40201433e-05,
         8.12656354e-05,   7.86014310e-05,   7.60245696e-05,
         7.35321877e-05,   7.11215159e-05,   6.87898752e-05,
         6.65346749e-05,   6.43534088e-05,   6.22436531e-05,
         6.02030634e-05,   5.82293722e-05,   5.63203864e-05,
         5.44739845e-05,   5.26881148e-05,   5.09607930e-05,
         4.92900995e-05,   4.76741778e-05,   4.61112323e-05,
         4.45995263e-05,   4.31373799e-05,   4.17231684e-05,
         4.03553202e-05,   3.90323155e-05,   3.77526840e-05,
         3.65150038e-05,   3.53178996e-05,   3.41600411e-05,
         3.30401417e-05,   3.19569570e-05,   3.09092834e-05,
         2.98959565e-05,   2.89158505e-05,   2.79678762e-05,
         2.70509801e-05,   2.61641435e-05,   2.53063809e-05,
         2.44767390e-05,   2.36742961e-05,   2.28981603e-05,
         2.21474693e-05,   2.14213889e-05,   2.07191123e-05,
         2.00398590e-05,   1.93828742e-05,   1.87474280e-05,
         1.81328142e-05,   1.75383499e-05,   1.69633744e-05,
         1.64072488e-05,   1.58693552e-05,   1.53490959e-05,
         1.48458927e-05,   1.43591864e-05,   1.38884363e-05,
         1.34331192e-05,   1.29927292e-05,   1.25667768e-05,
         1.21547889e-05,   1.17563075e-05,   1.13708899e-05,
         1.09981078e-05,   1.06375469e-05,   1.02888067e-05,
         9.95149945e-06,   9.62525049e-06,   9.30969725e-06,
         9.00448907e-06,   8.70928680e-06,   8.42376242e-06,
         8.14759864e-06,   7.88048858e-06,   7.62213544e-06,
         7.37225212e-06,   7.13056094e-06,   6.89679335e-06,
         6.67068957e-06,   6.45199835e-06,   6.24047669e-06,
         6.03588953e-06,   5.83800953e-06,   5.64661681e-06,
         5.46149870e-06,   5.28244947e-06,   5.10927018e-06,
         4.94176838e-06,   4.77975794e-06,   4.62305884e-06,
         4.47149694e-06,   4.32490383e-06,   4.18311662e-06,
         4.04597775e-06,   3.91333482e-06,   3.78504044e-06,
         3.66095206e-06,   3.54093177e-06,   3.42484622e-06,
         3.31256641e-06,   3.20396756e-06,   3.09892901e-06,
         2.99733403e-06,   2.89906974e-06,   2.80402693e-06,
         2.71209999e-06,   2.62318678e-06,   2.53718848e-06,
         2.45400955e-06,   2.37355755e-06,   2.29574308e-06,
         2.22047967e-06,   2.14768368e-06,   2.07727424e-06,
         2.00917309e-06,   1.94330456e-06,   1.87959546e-06,
         1.81797499e-06,   1.75837468e-06,   1.70072830e-06,
         1.64497180e-06,   1.59104321e-06,   1.53888260e-06,
         1.48843203e-06,   1.43963543e-06,   1.39243856e-06,
         1.34678900e-06,   1.30263600e-06,   1.25993051e-06,
         1.21862508e-06,   1.17867380e-06,   1.14003227e-06,
         1.10265757e-06,   1.06650815e-06,   1.03154386e-06])
    result = SZdist(pdi,nn)

    assert np.allclose(result, data, atol=1e-14)


easy_phi_z = np.array([  3.65555778e-01,   3.97530942e-01,   3.95177593e-01,
         3.88755392e-01,   3.80784804e-01,   3.72128254e-01,
         3.63090353e-01,   3.53797489e-01,   3.44313620e-01,
         3.34678411e-01,   3.24920384e-01,   3.15062002e-01,
         3.05122091e-01,   2.95117245e-01,   2.85062724e-01,
         2.74973026e-01,   2.64862253e-01,   2.54744317e-01,
         2.44633057e-01,   2.34542304e-01,   2.24485900e-01,
         2.14477710e-01,   2.04531625e-01,   1.94661559e-01,
         1.84881453e-01,   1.75205269e-01,   1.65646998e-01,
         1.56220661e-01,   1.46940309e-01,   1.37820027e-01,
         1.28873934e-01,   1.20116183e-01,   1.11560959e-01,
         1.03222487e-01,   9.51150272e-02,   8.72528915e-02,
         7.96504609e-02,   7.23222205e-02,   6.52828140e-02,
         5.85471226e-02,   5.21303666e-02,   4.60482169e-02,
         4.03168798e-02,   3.49530831e-02,   2.99738486e-02,
         2.53958999e-02,   2.12345582e-02,   1.75020558e-02,
         1.42053630e-02,   1.13438569e-02,   8.90736329e-03,
         6.87516042e-03,   5.21636994e-03,   3.89180122e-03,
         2.85690535e-03,   2.06521082e-03,   1.47156065e-03,
         1.03463569e-03,   7.18524401e-04,   4.93361836e-04,
         3.35231541e-04,   2.25588058e-04,   1.50440247e-04,
         9.94770155e-05,   6.52498334e-05,   4.24697365e-05,
         2.74367658e-05,   1.75962019e-05,   1.12044893e-05,
         6.43768632e-07,   3.90023255e-07,   2.34559779e-07,
         1.40008161e-07,   8.29272726e-08,   4.87244589e-08,
         2.83845206e-08,   1.63805733e-08,   9.35038310e-09,
         5.26436221e-09,   2.90675760e-09,   1.55475537e-09,
         7.81883338e-10,   3.39857917e-10,   9.31247294e-11])


def SCFeqns_test():

    # away from solution
    phi_z = np.linspace(.5,0,50)
    chi = 0.1
    chi_s = 0.05
    sigma = .1
    navgsegments = 95.5
    pdi = 1.2
    p_i = SZdist(pdi,navgsegments)
    data = np.array([ 0.24809791,  0.19944421,  0.16973004,  0.14729207,  0.13005919,
        0.11657451,  0.1058576 ,  0.09727039,  0.09038682,  0.08490298,
        0.08058535,  0.07724325,  0.07471421,  0.07285592,  0.07154151,
        0.07065667,  0.0700978 ,  0.06977082,  0.0695903 ,  0.06947884,
        0.0693665 ,  0.06919036,  0.06889397,  0.06842689,  0.06774423,
        0.06680614,  0.06557737,  0.06402683,  0.0621272 ,  0.05985452,
        0.05718783,  0.05410874,  0.05060095,  0.0466496 ,  0.04224034,
        0.037358  ,  0.03198467,  0.02609722,  0.01966451,  0.01264599,
        0.00499654, -0.00331032, -0.01221627, -0.02143066, -0.03017221,
       -0.0368608 , -0.0390676 , -0.03438821, -0.02291077, -0.01063797])
    result = SCFeqns(phi_z,chi,chi_s,sigma,navgsegments,p_i)

    assert np.allclose(result, data, atol=1e-14)

    # at solution
    phi_z = easy_phi_z.copy()
    data = np.array([ -9.29275656e-10,  -5.71891978e-11,  -6.36132980e-10,
        -1.55644470e-09,  -1.13562137e-09,  -9.72810998e-10,
        -1.63384251e-09,  -1.18849508e-09,  -2.89755997e-10,
        -7.75140729e-10,  -1.77285575e-10,   9.26357269e-10,
         1.16035548e-09,   1.35558675e-10,   3.92843202e-10,
        -1.16742410e-09,  -1.13646204e-09,   1.31389732e-10,
        -7.78504733e-10,  -1.16461951e-10,   1.06623541e-09,
         1.31860878e-09,   1.29663685e-09,   1.62908798e-10,
         1.10570880e-09,   1.12047055e-09,   2.64738925e-10,
        -9.46469014e-11,  -7.11506826e-10,  -1.17297003e-09,
        -1.00791675e-09,  -1.64910821e-10,  -1.19973043e-09,
        -6.62134000e-10,  -6.10394235e-10,  -6.62704516e-10,
        -7.97200833e-10,  -9.37733557e-10,  -1.10498952e-09,
        -1.24565039e-09,  -1.41609786e-09,  -1.67821476e-09,
        -2.02143805e-09,  -2.48336902e-09,  -2.98173394e-09,
        -3.44456769e-09,  -3.97225692e-09,  -4.38723306e-09,
        -4.62610414e-09,  -4.77197875e-09,  -4.73971094e-09,
        -4.48724133e-09,  -4.05071318e-09,  -3.46513581e-09,
        -2.77379159e-09,  -2.04575741e-09,  -1.32608356e-09,
        -6.40953530e-10,  -2.51873563e-11,   5.10576483e-10,
         9.60606713e-10,   1.32984396e-09,   1.62342469e-09,
         1.85145266e-09,   2.02196043e-09,   2.14281230e-09,
         2.21889979e-09,   2.25142468e-09,   2.23470713e-09,
        -6.43817608e-06,  -4.05512658e-06,  -2.53549899e-06,
        -1.57360459e-06,  -9.69199656e-07,  -5.92195683e-07,
        -3.58754495e-07,  -2.15266255e-07,  -1.27713614e-07,
        -7.46744540e-08,  -4.27578070e-08,  -2.36527590e-08,
        -1.22420735e-08,  -5.42986558e-09,  -1.49766885e-09])
    result = SCFeqns(phi_z,chi,chi_s,sigma,navgsegments,p_i)

    assert np.allclose(result, data, atol=1e-14)

    #TODO: check float overflow handling

def SCFeqns_multi_test():
    u_jz0 = np.zeros((3,50))
    chi_jk = (1-np.eye(4))*0.10
    sigma_j = np.array((0,0,.01,0))
    phi_b_j = np.array((0,0.1,0,.9))
    n_avg_j = np.array((0,1,75,1))
    data = np.array([[ -5.52314290e-02,  -1.03134227e-01,  -1.23902379e-01,
         -1.22509546e-01,  -1.06273052e-01,  -8.37906912e-02,
         -6.14775076e-02,  -4.26557546e-02,  -2.82764492e-02,
         -1.80107679e-02,  -1.10521437e-02,  -6.53981797e-03,
         -3.73196876e-03,  -2.05342896e-03,  -1.08910584e-03,
         -5.56654539e-04,  -2.74100305e-04,  -1.29996454e-04,
         -5.93673960e-05,  -2.61011669e-05,  -1.10451439e-05,
         -4.49767739e-06,  -1.76204598e-06,  -6.63994071e-07,
         -2.40621051e-07,  -8.38353786e-08,  -2.80765437e-08,
         -9.03600415e-09,  -2.79392144e-09,  -8.29734542e-10,
         -2.36606623e-10,  -6.47656499e-11,  -1.70117891e-11,
         -4.28644351e-12,  -1.03569370e-12,  -2.39799723e-13,
         -5.33117863e-14,  -1.14174698e-14,  -2.33501732e-15,
         -4.69846300e-16,  -7.89946904e-18,  -4.46512879e-18,
         -3.83374067e-18,  -3.72284436e-18,  -3.70424847e-18,
         -3.70127350e-18,  -3.70081979e-18,  -3.70075388e-18,
         -3.70074477e-18,   3.88888889e-03],
       [ -4.80798201e-02,  -9.35171085e-02,  -1.12258255e-01,
         -1.10885581e-01,  -9.60858691e-02,  -7.56790137e-02,
         -5.54733754e-02,  -3.84583301e-02,  -2.54757702e-02,
         -1.62161669e-02,  -9.94440779e-03,  -5.88034163e-03,
         -3.35319684e-03,  -1.84357314e-03,  -9.76975949e-04,
         -4.98890083e-04,  -2.45417330e-04,  -1.16271723e-04,
         -5.30403986e-05,  -2.32918008e-05,  -9.84387025e-06,
         -4.00313149e-06,  -1.56606621e-06,  -5.89252096e-07,
         -2.13194325e-07,  -7.41538364e-08,  -2.47897057e-08,
         -7.96306979e-09,  -2.45723773e-09,  -7.28200323e-10,
         -2.07187834e-10,  -5.65785055e-11,  -1.48240256e-11,
         -3.72528658e-12,  -8.97582123e-13,  -2.07195619e-13,
         -4.59321732e-14,  -9.81671965e-15,  -2.00240574e-15,
         -4.03677261e-16,   4.69670784e-18,  -2.17197266e-18,
         -3.43474891e-18,  -3.65654152e-18,  -3.69373330e-18,
         -3.69968325e-18,  -3.70059067e-18,  -3.70072248e-18,
         -3.70074070e-18,   5.55555556e-03],
       [ -6.85647624e-02,  -1.03134227e-01,  -1.23902379e-01,
         -1.22509546e-01,  -1.06273052e-01,  -8.37906912e-02,
         -6.14775076e-02,  -4.26557546e-02,  -2.82764492e-02,
         -1.80107679e-02,  -1.10521437e-02,  -6.53981797e-03,
         -3.73196876e-03,  -2.05342896e-03,  -1.08910584e-03,
         -5.56654539e-04,  -2.74100305e-04,  -1.29996454e-04,
         -5.93673960e-05,  -2.61011669e-05,  -1.10451439e-05,
         -4.49767739e-06,  -1.76204598e-06,  -6.63994071e-07,
         -2.40621051e-07,  -8.38353786e-08,  -2.80765437e-08,
         -9.03600414e-09,  -2.79392143e-09,  -8.29734531e-10,
         -2.36606612e-10,  -6.47656388e-11,  -1.70117780e-11,
         -4.28643240e-12,  -1.03568259e-12,  -2.39788621e-13,
         -5.33006841e-14,  -1.14063675e-14,  -2.32391509e-15,
         -4.58744069e-16,   3.20276120e-18,   6.63710145e-18,
          7.26848958e-18,   7.37938588e-18,   7.39798177e-18,
          7.40095675e-18,   7.40141046e-18,   7.40147636e-18,
          7.40148547e-18,  -9.44444444e-03]])
    result=SCFeqns_multi(u_jz0,chi_jk, sigma_j, phi_b_j, n_avg_j)

    assert np.allclose(result, data, atol=1e-14)

def SCFsolve_test():

    #find the solution used in the previous test without an initial guess
    chi = 0.1
    chi_s = 0.05
    sigma = .1
    phi_b = 0
    navgsegments = 95.5
    pdi = 1.2
    data = easy_phi_z.copy()
    result = SCFsolve(chi,chi_s,pdi,sigma,phi_b,navgsegments)

    assert np.allclose(result, data, atol=1e-14)

    # try a very hard one using the answer as an initial guess
    chi = 1
    chi_s = .5
    try:
        SCFsolve(chi,chi_s,pdi,sigma,phi_b,navgsegments)
    except NoConvergence:
        pass
    else: # Belongs to try, executes if no exception is raised
        assert False, 'should not arrive here'

    phi0 = np.array((
         7.68622748e-01,   7.38403430e-01,   7.24406743e-01,
         7.18854113e-01,   7.13805025e-01,   7.08721605e-01,
         7.03592422e-01,   6.98483104e-01,   6.93373096e-01,
         6.87807938e-01,   6.79307808e-01,   6.56674507e-01,
         5.77590583e-01,   3.58036148e-01,   1.00802863e-01,
         1.68381666e-02,   2.86654637e-03,   6.37708606e-04,
         1.74095080e-04,   5.19490850e-05,   1.59662700e-05,
         4.94738039e-06,   1.53508370e-06,   4.75950448e-07,
         1.47353950e-07))
    data = np.array([  7.68624312e-01,   7.38405145e-01,   7.24408672e-01,
         7.18856081e-01,   7.13806986e-01,   7.08723539e-01,
         7.03594317e-01,   6.98484957e-01,   6.93374957e-01,
         6.87810110e-01,   6.79311773e-01,   6.56686588e-01,
         5.77631688e-01,   3.58123600e-01,   1.00850801e-01,
         1.68473427e-02,   2.86793844e-03,   6.37969699e-04,
         1.74159404e-04,   5.19674954e-05,   1.59718082e-05,
         4.94903425e-06,   1.53553759e-06,   4.76031339e-07,
         1.47318754e-07,   4.54628534e-08,   1.39474535e-08,
         4.20912934e-09,   1.19875034e-09,   2.57686819e-10])
    result = SCFsolve(chi,chi_s,pdi,sigma,phi_b,navgsegments,phi0=phi0)

    assert np.allclose(result, data, atol=1e-14)


def SCFcache_test():
    _SCFcache_dict.clear()

    # check that the hard solution can be found by walking
    chi = 1
    chi_s = 0.5
    sigma = .1
    phi_b  = 0
    navgsegments = 95.5
    pdi = 1.2
    data = np.array([  7.68624312e-01,   7.38405144e-01,   7.24408672e-01,
         7.18856081e-01,   7.13806986e-01,   7.08723539e-01,
         7.03594316e-01,   6.98484957e-01,   6.93374956e-01,
         6.87810110e-01,   6.79311773e-01,   6.56686588e-01,
         5.77631687e-01,   3.58123600e-01,   1.00850800e-01,
         1.68473428e-02,   2.86793857e-03,   6.37969824e-04,
         4.76157372e-07,   1.47444834e-07,   4.55891547e-08,
         1.40745229e-08,   4.33861880e-09,   1.33544628e-09,
         4.10461145e-10,   1.25980351e-10,   3.86129878e-11,
         1.18189284e-11,   3.61284270e-12,   1.10293801e-12,
         3.36252029e-13,   1.02350919e-13,   3.45522596e-12,
         1.27740977e-11,   8.54541792e-12,   4.00587288e-12,
         1.12745338e-12])
    result = SCFcache(chi,chi_s,pdi,sigma,phi_b,navgsegments,False)
    assert np.allclose(result, data, atol=1e-14)

    # check that the cache is holding items
    assert _SCFcache_dict

    # check that cache is reordered on hits and misses
    cache_keys = list(_SCFcache_dict)
    oldest_key = cache_keys[0]
    newest_key = cache_keys[-1]
    SCFcache(0,0,1,.1,.1,50,False)

    assert oldest_key == list(_SCFcache_dict)[-1]
    SCFcache(chi,chi_s,pdi+.1,sigma,phi_b,navgsegments,False)
    assert newest_key == list(_SCFcache_dict)[-2]

    # check high pdi solutions converge without too many layers

    assert len(SCFcache(.47,0,1.75,.1,.1,100,0)) < 150


def SCFsqueeze_test():
    _SCFcache_dict.clear()

    # squeeze the easy solution substantially
    chi = 0.1
    chi_s = 0.05
    sigma = .1
    phi_b = 0
    navgsegments = 95.5
    pdi = 1.2
    layers = 65
    data = np.array([  3.65558082e-01,   3.97533333e-01,   3.95179978e-01,
         3.88757819e-01,   3.80787284e-01,   3.72130794e-01,
         3.63092959e-01,   3.53800165e-01,   3.44316370e-01,
         3.34681240e-01,   3.24923297e-01,   3.15065003e-01,
         3.05125186e-01,   2.95120440e-01,   2.85066025e-01,
         2.74976440e-01,   2.64865786e-01,   2.54747977e-01,
         2.44636853e-01,   2.34546245e-01,   2.24489996e-01,
         2.14481972e-01,   2.04536066e-01,   1.94666194e-01,
         1.84886295e-01,   1.75210336e-01,   1.65652309e-01,
         1.56226235e-01,   1.46946170e-01,   1.37826200e-01,
         1.28880447e-01,   1.20123068e-01,   1.11568257e-01,
         1.03230243e-01,   9.51233029e-02,   8.72617647e-02,
         7.96600346e-02,   7.23326302e-02,   6.52942345e-02,
         5.85597723e-02,   5.21445036e-02,   4.60641230e-02,
         4.03348257e-02,   3.49732711e-02,   2.99963349e-02,
         2.54205052e-02,   2.12607873e-02,   1.75290516e-02,
         1.42319226e-02,   1.13685232e-02,   8.92858342e-03,
         6.89147965e-03,   5.22661400e-03,   3.89520205e-03,
         2.85314433e-03,   2.05437856e-03,   1.45405351e-03,
         1.01101862e-03,   6.89388676e-04,   4.59200254e-04,
         2.96354450e-04,   1.82124633e-04,   1.02535872e-04,
         4.79564181e-05,   1.33585282e-05])
    result = SCFsqueeze(chi,chi_s,pdi,sigma,phi_b,navgsegments,layers)
    assert np.allclose(result, data)

long_profile = np.array([ 0.50131233,  0.48794593,  0.47457953,  0.46158499,  0.45403167,
        0.44647835,  0.43948169,  0.43627941,  0.43307714,  0.429997  ,
        0.42743118,  0.42486537,  0.42233352,  0.41990046,  0.4174674 ,
        0.4150468 ,  0.41265271,  0.41025862,  0.40787404,  0.40550474,
        0.40313543,  0.40077614,  0.39842919,  0.39608225,  0.39374588,
        0.39141961,  0.38909333,  0.38677774,  0.38447001,  0.38216228,
        0.37986495,  0.37757347,  0.37528199,  0.3730004 ,  0.37072298,
        0.36844556,  0.36617745,  0.36391216,  0.36164686,  0.3593903 ,
        0.35713549,  0.35488069,  0.35263409,  0.35038844,  0.34814279,
        0.34590489,  0.34366732,  0.34142991,  0.33919957,  0.33696922,
        0.33473946,  0.3325157 ,  0.33029194,  0.32806911,  0.32585147,
        0.32363382,  0.32141743,  0.31920557,  0.31699371,  0.31478342,
        0.31257715,  0.31037088,  0.30816651,  0.30596575,  0.30376498,
        0.30156648,  0.29937124,  0.29717601,  0.29498344,  0.29279386,
        0.29060427,  0.28841782,  0.2862341 ,  0.28405037,  0.28187034,
        0.27969279,  0.27751523,  0.27534203,  0.27317105,  0.27100006,
        0.26883422,  0.26667031,  0.2645064 ,  0.26234857,  0.26019234,
        0.25803611,  0.25588707,  0.25373926,  0.25159144,  0.24945213,
        0.24731358,  0.24517502,  0.24304654,  0.24091824,  0.23879047,
        0.23667356,  0.23455666,  0.23244117,  0.23033699,  0.22823281,
        0.22613112,  0.22404118,  0.22195125,  0.21986513,  0.21779117,
        0.21571721,  0.2136487 ,  0.21159271,  0.20953672,  0.20748815,
        0.20545239,  0.20341663,  0.20139069,  0.19937773,  0.19736476,
        0.19536452,  0.19337727,  0.19139002,  0.18941896,  0.18746069,
        0.18550243,  0.1835645 ,  0.1816389 ,  0.17971329,  0.17781293,
        0.17592407,  0.17403522,  0.17217734,  0.17032975,  0.16848217,
        0.1666722 ,  0.16487079,  0.16306939,  0.16131321,  0.15956328,
        0.15781335,  0.15611721,  0.15442436,  0.15273191,  0.15110193,
        0.14947194,  0.1478468 ,  0.14628554,  0.14472428,  0.14317303,
        0.14168623,  0.14019943,  0.13872847,  0.13732151,  0.13591455,
        0.13452981,  0.13320753,  0.13188524,  0.1305919 ,  0.1293583 ,
        0.12812469,  0.12692687,  0.12578495,  0.12464302,  0.12354356,
        0.12249509,  0.12144663,  0.12044684,  0.11949229,  0.11853775,
        0.11763735,  0.1167758 ,  0.11591426,  0.11511134,  0.11434052,
        0.11356971,  0.11286082,  0.11217721,  0.1114936 ,  0.11087393,
        0.11027292,  0.10967191,  0.10913553,  0.10861164,  0.10808775,
        0.10762791,  0.10717502,  0.10672213,  0.10633157,  0.10594319,
        0.10555655,  0.10522604,  0.10489553,  0.10456984,  0.10429062,
        0.1040114 ,  0.10373927,  0.10350499,  0.10327071,  0.10304507,
        0.10284975,  0.10265444,  0.10246868,  0.10230682,  0.10214496,
        0.10199306,  0.10185966,  0.10172627,  0.10160282,  0.10149344,
        0.10138407,  0.10128431,  0.10119505,  0.10110579,  0.1010256 ,
        0.10095307,  0.10088055,  0.1008164 ,  0.1007577 ,  0.100699  ,
        0.10064791,  0.10060057,  0.10055324,  0.10051272,  0.10047468,
        0.10043663,  0.10040462,  0.10037414,  0.10034366,  0.10031846,
        0.10029411,  0.10026976,  0.10024999,  0.10023058,  0.10021118,
        0.10019572,  0.10018031,  0.10016506,  0.10015284,  0.10014062,
        0.10012869,  0.10011903,  0.10010936,  0.10010007,  0.10009245,
        0.10008482,  0.10007759,  0.10007159,  0.10006559,  0.10005999,
        0.10005528,  0.10005057,  0.10004624,  0.10004255,  0.10003886,
        0.10003552,  0.10003264,  0.10002976,  0.10002719,  0.10002495,
        0.1000227 ,  0.10002074,  0.100019  ,  0.10001725,  0.10001575,
        0.1000144 ,  0.10001305,  0.10001192,  0.10001087,  0.10000983,
        0.10000897,  0.10000817,  0.10000736,  0.10000672,  0.1000061 ,
        0.10000549,  0.100005  ,  0.10000453,  0.10000406,  0.1000037 ,
        0.10000334,  0.10000299,  0.10000272,  0.10000245,  0.10000218,
        0.10000198,  0.10000177,  0.10000158,  0.10000142,  0.10000127,
        0.10000113,  0.10000101,  0.1000009 ,  0.10000079,  0.1000007 ,
        0.10000062,  0.10000054,  0.10000047,  0.1000004 ,  0.10000034,
        0.10000029,  0.10000024,  0.10000019,  0.10000014,  0.10000009,
        0.10000005,  0.1       ,  0.09999995,  0.0999999 ,  0.09999985,
        0.0999998 ,  0.09999974,  0.09999967,  0.0999996 ,  0.1       ,
        0.1       ,  0.1       ,  0.1       ,  0.1       ,  0.1       ,
        0.1       ,  0.1       ,  0.1       ,  0.1       ,  0.1       ,
        0.1       ,  0.1       ,  0.1       ,  0.1       ,  0.1       ,
        0.1       ,  0.1       ,  0.1       ,  0.1       ,  0.1       ,
        0.1       ,  0.1       ,  0.1       ,  0.1       ,  0.1       ,
        0.1       ,  0.1       ,  0.1       ,  0.1       ,  0.1       ,
        0.1       ,  0.1       ,  0.1       ,  0.1       ,  0.1       ,
        0.1       ,  0.1       ,  0.1       ,  0.1       ,  0.1       ])


def SCFprofile_test():
    _SCFcache_dict.clear()

    # basically checking that numpy interp hasn't changed
    data = long_profile.copy()
    result = SCFprofile(np.linspace(0,120,350), chi=.5, chi_s=.3, h_dry=15,
                        l_lat=1, mn=200, m_lat=1, phi_b=0.1, pdi=1.5, disp=False)
    assert np.allclose(result, data, atol=1e-14)


def benchmark():
    from time import time
    from collections import OrderedDict
    start=time()
    cache=OrderedDict()
    SCFcache(0,0,1,.1,0,160.52,0,cache)
    SCFcache(0,0,1.75,.1,0,360.52,0,cache)
    print('Benchmark time:', time()-start, 'seconds.')


def main():
    from time import time
    start=time()
    calc_g_zs_ta_test()
    calc_g_zs_free_test()
    calc_g_zs_ngts_u_test()
    calc_g_zs_ngts_test()
    SZdist_test()
    SCFeqns_test()
    SCFsolve_test()
    SCFeqns_multi_test()
    SCFcache_test()
    SCFsqueeze_test()
    SCFprofile_test()
    stop=time()
    print('All tests passed in {:.3g} seconds!'.format(stop-start))
    benchmark()


if __name__ == '__main__':
    main()
